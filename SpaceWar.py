
# 1 - Import library
import pygame
from pygame.locals import *
import math
import random

WHITE=(255,255,255)

# 2 - Initialize the game
pygame.init()
#set up display window
width, height = 1280, 720
screen=pygame.display.set_mode((width, height))
# set up the keys W,A,S,D to false
#first to W for up, second to A for left, S for down and D for right movement.
keys = [False, False, False, False]
#initialise the player position
playerpos=[100,100]
#keep trackof player's accuracy
acc=[0,0]
#track all arrows
arrows=[]
#sets up a timer so that the game adds new aliens after some time has elapsed
badtimer=100
badtimer1=0
badguys=[[1280,100]]
healthvalue=194
pygame.mixer.init()

# 3 - Load image
player = pygame.image.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\images\ship.png")
grass = pygame.image.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\images\background.png")
castle = pygame.image.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\images\spacestation.png")
arrow = pygame.image.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\images\bullet.png")
badguyimg1 = pygame.image.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\images\alien.png")
badguyimg=badguyimg1
healthbar = pygame.image.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\images\healthbar.png")
health = pygame.image.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\images\health.png")
gameover = pygame.image.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\images\gameover.png")
youwin = pygame.image.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\images\youwin.png")
# 3.1 - Load audio
hit = pygame.mixer.Sound(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\audio\explode.wav")
enemy = pygame.mixer.Sound(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\audio\enemy.wav")
shoot = pygame.mixer.Sound(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\audio\shoot.wav")
hit.set_volume(0.05)
enemy.set_volume(0.05)
shoot.set_volume(0.05)
pygame.mixer.music.load(r"C:\Users\Varnith GV\Desktop\DSU\6th sem NOTES\1. Computer Graphics\Computer Graphics Mini Project\Resource\audio\moonlight.wav")
pygame.mixer.music.play(-1, 0.0)
pygame.mixer.music.set_volume(0.25)

#Starting Screen Interface
def ShowStartInterface(screen):
    screen.fill((0,0,0))
    tfont = pygame.font.SysFont('arial', 1280//15)
    cfont = pygame.font.SysFont('arial', 1280//30)
    title = tfont.render(u'Space War', True, (255, 0, 0))
    content = cfont.render(u'Press any key to continue', True, (0, 0, 255))
    trect = title.get_rect()
    trect.midtop = (1280/2, 720/5)
    crect = content.get_rect()
    crect.midtop = (1280/2, 720/2)
    screen.blit(title, trect)
    screen.blit(content, crect)
    pygame.display.update()
    while True: #checking weather the key is pressed
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                return
# 4 - keep looping through
running = 1
exitcode = 0
ShowStartInterface(screen)
while running:
    badtimer-=1     #decrement badtimer for each frame
    # 5 - clear the screen before drawing it again
    screen.fill(0)
    # 6 - draw the player on the screen at X:100, Y:100    
#the for statement loops through x first. Then, within that loop, it loops through y and draws the grass at x and y values generated by for loop. 
    for x in range(int(width/grass.get_width()+1)):
        for y in range(int(height/grass.get_height()+1)):
            screen.blit(grass,(x*100,y*100))
    screen.blit(castle,(0,30))
    screen.blit(castle,(0,135))
    screen.blit(castle,(0,240))
    screen.blit(castle,(0,345 ))
    screen.blit(castle,(0,450))
    screen.blit(castle,(0,555))
    screen.blit(castle,(0,660))
    # 6.1 - Set spaceship position and rotation
    position = pygame.mouse.get_pos()
    angle = math.atan2(position[1]-(playerpos[1]+32),position[0]-(playerpos[0]+26))
    playerrot = pygame.transform.rotate(player, 360-angle*57.29)
    playerpos1 = (playerpos[0]-playerrot.get_rect().width/2, playerpos[1]-playerrot.get_rect().height/2)
    screen.blit(playerrot, playerpos1) 
    # 6.2 - Draw arrows
    for bullet in arrows:
        index=0
        velx=math.cos(bullet[0])*10
        vely=math.sin(bullet[0])*10
        bullet[1]+=velx
        bullet[2]+=vely
    #check if bullet is out of the screen,if so delete the arrow
        if bullet[1]<-1 or bullet[1]>1280 or bullet[2]<-1 or bullet[2]>720:    
            arrows.pop(index)
        index+=1
    #loop through the arrows and draws these with the correct rotation.
        for projectile in arrows:
            arrow1 = pygame.transform.rotate(arrow, 360-projectile[0]*57.29)
            screen.blit(arrow1, (projectile[1], projectile[2]))
    # 6.3 - Draw moles
    #check if badtimer is zero, and if it is, creates a mole and sets up badtimer again based on the number of times badtimer has run so far
    if badtimer==0:
        badguys.append([1280, random.randint(50,720)])
        badtimer=100-(badtimer1*2)
        if badtimer1>=35:
            badtimer1=35
        else:
            badtimer1+=5
    index=0

    # update x position of the moles, checks if moles are off screen and removes these if so.
    for badguy in badguys:
        if badguy[0]<-64:
            badguys.pop(index)
        badguy[0]-=7

        # 6.3.1 - Attack castle
        badrect=pygame.Rect(badguyimg.get_rect())
        badrect.top=badguy[1]
        badrect.left=badguy[0]
        if badrect.left<64:
            hit.play()
            healthvalue -= random.randint(5,20)
            badguys.pop(index)       #remove the badguy whohas been hit

        #6.3.2 - Check for collisions
    #loop through all the bad guys and inside each of those loops, loop through all the arrows and check if these collide. 
    #If they do, then delete the badguy and the arrow, and add one to your accuracy ratio.
        index1=0
        for bullet in arrows:
            bullrect=pygame.Rect(arrow.get_rect())
            bullrect.left=bullet[1]
            bullrect.top=bullet[2]
            if badrect.colliderect(bullrect):
                enemy.play()
                acc[0]+=1
                badguys.pop(index)
                arrows.pop(index1)
            index1+=1

        # 6.3.3 - Next bad guy
        index+=1
    for badguy in badguys:
        screen.blit(badguyimg, badguy)
    # 6.4 - Draw clock
    font = pygame.font.Font(None, 24)
    colour=WHITE
    survivedtext = font.render(str((90000-pygame.time.get_ticks())/60000)+":"+str((90000-pygame.time.get_ticks())/1000%60).zfill(2), True, (colour))
    textRect = survivedtext.get_rect()
    textRect.topright=[1280,5]
    screen.blit(survivedtext, textRect)
    # 6.5 - Draw health bar
    screen.blit(healthbar, (5,5))
    for health1 in range(healthvalue):
        screen.blit(health, (health1+8,8))
    # 7 - update the screen
    pygame.display.flip()
    # 8 - loop through the events
    for event in pygame.event.get():
        # check if the event is the X button 
        if event.type==pygame.QUIT:
            # if it is quit the game
            pygame.quit()
            exit(0)
        if event.type == pygame.KEYDOWN:
            if event.key==K_w:
                keys[0]=True
            elif event.key==K_a:
                keys[1]=True
            elif event.key==K_s:
                keys[2]=True
            elif event.key==K_d:
                keys[3]=True
        if event.type == pygame.KEYUP:
            if event.key==pygame.K_w:
                keys[0]=False
            elif event.key==pygame.K_a:
                keys[1]=False
            elif event.key==pygame.K_s:
                keys[2]=False
            elif event.key==pygame.K_d:
                keys[3]=False
        if event.type==pygame.MOUSEBUTTONDOWN:
            shoot.play()
            position=pygame.mouse.get_pos()
            acc[1]+=1
            arrows.append([math.atan2(position[1]-(playerpos1[1]+32),position[0]-(playerpos1[0]+26)),playerpos1[0]+32,playerpos1[1]+32])
                
    # 9 - Move player
    if keys[0]:
        playerpos[1]-=5
    elif keys[2]:
        playerpos[1]+=5
    if keys[1]:
        playerpos[0]-=5
    elif keys[3]:
        playerpos[0]+=5

    #10 - Win/Lose check
    #checks if the time is up   
    if pygame.time.get_ticks()>=90000:
        running=0
        exitcode=1
    # checks if the castle is destroyed
    if healthvalue<=0:
        running=0
        exitcode=0
    if acc[1]!=0:
        accuracy=acc[0]*1.0/acc[1]*100
    else:
        accuracy=0
# 11 - Win/lose display        
if exitcode==0:
    pygame.font.init()
    font = pygame.font.Font(None, 24)
    text = font.render("Accuracy: "+str(accuracy)+"%", True, (255,0,0),"game desinged by Us")
    textRect = text.get_rect()
    textRect.centerx = screen.get_rect().centerx
    textRect.centery = screen.get_rect().centery+24
    screen.blit(gameover, (0,0))
    screen.blit(text, textRect)
else:
    pygame.font.init()
    font = pygame.font.Font(None, 24)
    text = font.render("Accuracy: "+str(accuracy)+"%", True, (0,255,0),"game desinged by Us")
    textRect = text.get_rect()
    textRect.centerx = screen.get_rect().centerx
    textRect.centery = screen.get_rect().centery+24
    screen.blit(youwin, (0,0))
    screen.blit(text, textRect)
while 1:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit(0)
    pygame.display.flip()

